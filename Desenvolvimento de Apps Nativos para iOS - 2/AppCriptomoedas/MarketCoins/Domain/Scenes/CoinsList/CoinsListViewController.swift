//
//  CoinsListViewController.swift
//  MarketCoins
//
//  Created by Marcel Leite de Farias on 11/04/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CoinsListDisplayLogic: AnyObject {
    func displayGlobalValues(viewModel: CoinsList.FetchGlobalValues.ViewModel)
    func displayListCoins(viewModel: CoinsList.FetchListCoins.ViewModel)
    func displayError(error: String)
}

class CoinsListViewController: UIViewController {
    
    private var globalViewModel: CoinsList.FetchGlobalValues.ViewModel?
    private var coinsViewModel: CoinsList.FetchListCoins.ViewModel?
    
    var interactor: CoinsListBusinessLogic?
    var router: (NSObjectProtocol & CoinsListRoutingLogic & CoinsListDataPassing)?

  
  
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
  
    private func setup() {
        let viewController = self
        let interactor = CoinsListInteractor()
        let presenter = CoinsListPresenter()
        let router = CoinsListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
  
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
  
    override func viewDidLoad() {
        super.viewDidLoad()
        doFetchGlobalValues()
        doFetchListCoins()
    }
  
    func doFetchGlobalValues() {
        let request = CoinsList.FetchGlobalValues.Request(baseCoin: "brl")
        interactor?.doFetchGlobalValues(request: request)
    }
    
    func doFetchListCoins() {
        let request = CoinsList.FetchListCoins.Request(
            baseCoin: "brl",
            orderBy: "market_cap_desc",
            top: 10,
            pricePercentage: "1h"
        )
        interactor?.doFetchListCoins(request: request)
    }
  
}

extension CoinsListViewController: CoinsListDisplayLogic {
    func displayGlobalValues(viewModel: CoinsList.FetchGlobalValues.ViewModel) {
        globalViewModel = viewModel
    }
    func displayListCoins(viewModel: CoinsList.FetchListCoins.ViewModel) {
        coinsViewModel = viewModel
    }
    func displayError(error: String) {
        print(error)
    }
}

